/*
Copyright 2018 The Soter Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/soter/scanner/apis/scanner/v1alpha1"
	scheme "github.com/soter/scanner/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	rest "k8s.io/client-go/rest"
)

// WorkloadReviewsGetter has a method to return a WorkloadReviewInterface.
// A group's client should implement this interface.
type WorkloadReviewsGetter interface {
	WorkloadReviews(namespace string) WorkloadReviewInterface
}

// WorkloadReviewInterface has methods to work with WorkloadReview resources.
type WorkloadReviewInterface interface {
	Get(name string, options v1.GetOptions) (*v1alpha1.WorkloadReview, error)
	WorkloadReviewExpansion
}

// workloadReviews implements WorkloadReviewInterface
type workloadReviews struct {
	client rest.Interface
	ns     string
}

// newWorkloadReviews returns a WorkloadReviews
func newWorkloadReviews(c *ScannerV1alpha1Client, namespace string) *workloadReviews {
	return &workloadReviews{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the workloadReview, and returns the corresponding workloadReview object, and an error if there is any.
func (c *workloadReviews) Get(name string, options v1.GetOptions) (result *v1alpha1.WorkloadReview, err error) {
	result = &v1alpha1.WorkloadReview{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("workloadreviews").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}
